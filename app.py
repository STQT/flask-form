from flask import Flask, render_template, request, jsonify, redirect, url_for
import gspread
from google.oauth2.service_account import Credentials
import os
from datetime import datetime
import re
import csv
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import requests
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

def get_google_sheets_client():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    try:
        creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPE)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

def save_lead_csv(name, phone, utm_source='', utm_medium='', utm_campaign='', utm_term='', utm_content=''):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV —Ñ–∞–π–ª"""
    try:
        file_exists = os.path.exists('leads.csv')
        with open('leads.csv', 'a', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'UTM Source', 'UTM Medium', 'UTM Campaign', 'UTM Term', 'UTM Content']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            if not file_exists:
                writer.writeheader()
            writer.writerow({
                '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                '–ò–º—è': name,
                '–¢–µ–ª–µ—Ñ–æ–Ω': phone,
                'UTM Source': utm_source,
                'UTM Medium': utm_medium,
                'UTM Campaign': utm_campaign,
                'UTM Term': utm_term,
                'UTM Content': utm_content
            })
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")
        return False

def send_email_lead(name, phone):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –Ω–∞ email"""
    try:
        sender_email = os.getenv('SENDER_EMAIL', 'your-email@gmail.com')
        sender_password = os.getenv('SENDER_PASSWORD', 'your-app-password')
        to_email = os.getenv('TO_EMAIL', 'your-email@gmail.com')
        
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = to_email
        msg['Subject'] = f"–ù–æ–≤—ã–π –ª–∏–¥ InterAutoSchool - {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        body = f"""
        üöó –ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç InterAutoSchool
        
        üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        üë§ –ò–º—è: {name}
        üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, to_email, msg.as_string())
        server.quit()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

def send_telegram_lead(name, phone):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Telegram"""
    try:
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not bot_token or not chat_id:
            return False
        
        message = f"""
üöó *–ù–æ–≤—ã–π –ª–∏–¥ –æ—Ç InterAutoSchool*

üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üë§ *–ò–º—è:* {name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}
        """
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    phone_digits = re.sub(r'\D', '', phone)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 998 –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 12 —Ü–∏—Ñ—Ä
    return phone_digits.startswith('998') and len(phone_digits) == 12

def validate_name(name):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∑–±–µ–∫—Å–∫–æ–≥–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã (–≤–∫–ª—é—á–∞—è —É–∑–±–µ–∫—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
    return bool(re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—û“í“ì“≥“õ“ö—û–é\s\-]+$', name.strip())) and len(name.strip()) >= 2

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    utm_source = request.args.get('utm_source', '')
    utm_medium = request.args.get('utm_medium', '')
    utm_campaign = request.args.get('utm_campaign', '')
    utm_term = request.args.get('utm_term', '')
    utm_content = request.args.get('utm_content', '')
    
    return render_template('index.html', 
                         utm_source=utm_source,
                         utm_medium=utm_medium,
                         utm_campaign=utm_campaign,
                         utm_term=utm_term,
                         utm_content=utm_content)

@app.route('/submit', methods=['POST'])
def submit_lead():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.form.get('name', '').strip()
        phone = request.form.get('phone', '').strip()
        
        # –ü–æ–ª—É—á–∞–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        utm_source = request.form.get('utm_source', '')
        utm_medium = request.form.get('utm_medium', '')
        utm_campaign = request.form.get('utm_campaign', '')
        utm_term = request.form.get('utm_term', '')
        utm_content = request.form.get('utm_content', '')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_name(name):
            return jsonify({
                'success': False,
                'message': '–ò–ª—Ç–∏–º–æ—Å, —Ç—û“ì—Ä–∏ –∏—Å–º –∫–∏—Ä–∏—Ç–∏–Ω–≥ (—Ñ–∞“õ–∞—Ç “≥–∞—Ä—Ñ–ª–∞—Ä, –∫–∞–º–∏–¥–∞ 2 —Ç–∞ –±–µ–ª–≥–∏)'
            }), 400
        
        if not validate_phone(phone):
            return jsonify({
                'success': False,
                'message': '–ò–ª—Ç–∏–º–æ—Å, —Ç—û“ì—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω: +998)'
            }), 400
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        success = False
        
        # 1. –ü—Ä–æ–±—É–µ–º Google Sheets
        try:
            client = get_google_sheets_client()
            if client:
                spreadsheet_id = app.config['GOOGLE_SHEET_ID']
                if spreadsheet_id != 'your_spreadsheet_id_here':
                    sheet = client.open_by_key(spreadsheet_id).sheet1
                    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    # –î–æ–±–∞–≤–ª—è–µ–º UTM –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
                    sheet.append_row([timestamp, name, phone, utm_source, utm_medium, utm_campaign, utm_term, utm_content])
                    success = True
                    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets")
        except Exception as e:
            print(f"‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # 2. –ü—Ä–æ–±—É–µ–º Telegram
        if not success:
            if send_telegram_lead(name, phone):
                success = True
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        
        # 3. –ü—Ä–æ–±—É–µ–º Email
        if not success:
            if send_email_lead(name, phone):
                success = True
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Email")
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        # save_lead_csv(name, phone, utm_source, utm_medium, utm_campaign, utm_term, utm_content)
        # print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CSV —Ñ–∞–π–ª")
        
        if not success:
            success = True  # CSV –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        return jsonify({
            'success': True,
            'message': '–†–∞—Ö–º–∞—Ç! –°–∏–∑–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ –∂—û–Ω–∞—Ç–∏–ª–¥–∏.'
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã: {e}")
        return jsonify({
            'success': False,
            'message': '–•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏. –ö–µ–π–∏–Ω—Ä–æ“õ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.'
        }), 500

@app.route('/success')
def success():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    return render_template('success.html')

@app.route('/utm-test')
def utm_test():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UTM –º–µ—Ç–æ–∫"""
    return render_template('utm_test.html')


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8000)
